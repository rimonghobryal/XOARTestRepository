args:
- description: '[string] Short summary of the alert which will be attached to incident.'
  name: alertSummary
  required: true
- description: '[optional string] Default set to "50". '
  name: severity
- description: '[string] The name of the incident.'
  name: name
  required: true
- description: '[optional string] Set assignee login name if assignee has changed.
    You can execute nw-get-available-assignees to get the list of users. Example:
    demisto123.'
  name: assigned
- description: List of event ids separated by comma [,] must not include spaces in
    it. In order to get list of events you can use nw-get-events.
  name: eventList
  required: true
- description: The id of the device/component (Concentrator, Log Decoder, Packet Decoder,
    etc.) from which the events are. You can view the list of devices by executing
    the command nw-get-components.
  name: deviceId
  required: true
- auto: PREDEFINED
  description: Priority of the incident.
  name: priority
  predefined:
  - LOW
  - MEDIUM
  - HIGH
  - CRITICAL
  required: true
- description: Summary of the incident.
  name: summary
- description: '[optional number] This is the id of NetWitness INCIDENT_MANAGEMENT
    device/component id. It can be received by running nw-get-component command. If
    this argument is not filled/passed, the script will automatically get the first
    device of type INCIDENT_MANAGEMENT from the SA server.'
  name: incidentManagementId
comment: Create an incident inside NetWitness SA from a set of NetWitness events.
commonfields:
  id: NetwitnessSACreateIncident
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.12
    packID: RsaNetwitnessSecurityAnalytics
    packName: RSA NetWitness Security Analytics
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - netwitness-im-create-incident
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: NetwitnessSACreateIncident
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('NetwitnessSACreateIncident', 'start', __line__())
  ### pack version: 1.0.12




  def netwitness_im_create_incident():
      resp = demisto.executeCommand("netwitness-im-create-incident", demisto.args())

      if isError(resp[0]):
          result = resp
      else:
          data = demisto.get(resp[0], "Contents.incident")
          if data:
              data = data if isinstance(data, list) else [data]
              data = [{k: formatCell(row[k]) for k in row} for row in data]
              result = {"ContentsFormat": formats["table"], "Type": entryTypes["note"], "Contents": data}
          else:
              result = "No results."
      return_results(result)


  def main():  # pragma: no cover
      try:
          netwitness_im_create_incident()
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('NetwitnessSACreateIncident', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- RSA NetWitness Security Analytics
type: python
