args:
- description: 'If query provided all other parameters ignored. Query should contain
    page, limit, start, sort and filter, joined by &, For example: page=1&start=0&limit=100&sort=[{"property":"created","direction":"DESC"}]&filter=[{"property":"created","value":[851171984031,1482323984031]}].'
  name: query
- description: The default is 1. Indicates the page number of incidents.
  name: page
- description: The default is 0. Indicates the start index of incident in page.
  name: start
- description: The default is 100. Limits the number of incidents per page.
  name: limit
- description: 'By default sorts by "created" field in "DESC" order. Example: "[{"property":"created","direction":"DESC"}]".'
  name: sort
- description: 'By default filters by "created" from 1996 to this date. Example: "[{"property":"id",
    "value":"INC-21"}]".'
  name: filter
- description: '[optional number] This is the id of NetWitness INCIDENT_MANAGEMENT
    device/component id. It can be received by running nw-get-component command. If
    this argument is not filled/passed, the script will automatically get the first
    device of type INCIDENT_MANAGEMENT from the SA server.'
  name: incidentManagementId
comment: List NetWitness SA incidents. Filtering and sorting the list is also supported
  (see optional arguments).
commonfields:
  id: NetwitnessSAListIncidents
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.12
    packID: RsaNetwitnessSecurityAnalytics
    packName: RSA NetWitness Security Analytics
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - netwitness-im-list-incidents
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: NetwitnessSAListIncidents
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('NetwitnessSAListIncidents', 'start', __line__())
  ### pack version: 1.0.12




  def netwitness_im_list_incidents():
      resp = demisto.executeCommand("netwitness-im-list-incidents", demisto.args())

      if isError(resp[0]):
          result = resp
      else:
          data = demisto.get(resp[0], "Contents.incidents")
          if data:
              data = data if isinstance(data, list) else [data]
              formatTimeColumns(data, ['lastUpdated', 'firstAlertTime', 'created'])
              data = [{k: formatCell(row[k]) for k in row} for row in data]
              result = {"ContentsFormat": formats["table"], "Type": entryTypes["note"], "Contents": data}
          else:
              result = "No results."
      return_results(result)


  def main():  # pragma: no cover
      try:
          netwitness_im_list_incidents()
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('NetwitnessSAListIncidents', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- RSA NetWitness Security Analytics
type: python
