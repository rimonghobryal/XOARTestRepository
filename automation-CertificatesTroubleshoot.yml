args:
- description: The endpoint identifier IP address or URL. For example, "google.com".
  name: endpoint
  required: true
- auto: PREDEFINED
  defaultValue: python
  description: Operation mode. Determines how the endpoint is inspected. Options are
    either python or openssl.
  name: mode
  predefined:
  - python
  - openssl
- defaultValue: "443"
  description: The endpoint port. Default is 443.
  name: port
comment: Exports all certificate-related information from the Python Docker container
  and decodes it using RFC. It also retrieves the certificate located in the specified
  endpoint.
commonfields:
  id: CertificatesTroubleshoot
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 2.0.20
    packID: Troubleshoot
    packName: Troubleshoot
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/auth-utils:1.0.0.91447
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CertificatesTroubleshoot
outputs:
- contextPath: TroubleShoot.Engine.SSL/TLS.ShellVariables.SSL_CERT_FILE
  description: The SSL_CERT_FILE environment variable. For example, "/etc/custom-python-ssl/certs.pem".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.ShellVariables.CERT_FILE
  description: The CERT_FILE environment variable. For example, "/etc/custom-python-ssl/certs.pem".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.OrganizationalUnitName
  description: The unit name of the organization that is the holder of the engine
    custom SSL certificate. For example, "Content".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.OrganizationName
  description: The name of the organization that is the holder of the engine custom
    SSL certificate. For example, "Cortex XSOAR".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.BusinessCategory
  description: The business category of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.Title
  description: The title of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.SerialNumber
  description: The serial number of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.StateOrProvinceName
  description: The state or province of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.DomainComponent
  description: The DNS domain name of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.GivenName
  description: The given name of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.Pseudonym
  description: The pseudonym of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.JurisdictionStateOrProvinceName
  description: The jurisdiction state or province of the holder of the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.GenerationQualifier
  description: The generation qualifier of the holder of the engine custom SSL certificate.
    For example, 3rd generation.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.LocalityName
  description: The locality of the holder of the engine custom SSL certificate. For
    example, "Birmingham".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.SurName
  description: The surname of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.CommonName
  description: The common name of the holder of the engine custom SSL certificate.
    For example, "Cortex XSOAR TLS".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.JurisdictionLocalityName
  description: The jurisdiction locality of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.StreetAddress
  description: The street address of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.PostalCode
  description: The postal code of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.PostalAddress
  description: The postal address of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.JurisdictionCountryName
  description: The jurisdiction country name of the holder of the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.CountryName
  description: The country of the holder of the engine custom SSL certificate. For
    example, "GB".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.EmailAddress
  description: The email address of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Subject.DomainNameQualifier
  description: The domain name qualifier of the holder of the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.OrganizationalUnitName
  description: The unit name of the organization of the authority that issued the
    engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.OrganizationName
  description: The name of the organization of the authority that issued the engine
    custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.BusinessCategory
  description: The business category of the authority that issued the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.Title
  description: The title of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.SerialNumber
  description: The serial number of the authority that issued the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.StateOrProvinceName
  description: The state or province of the authority that issued the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.DomainComponent
  description: The DNS domain name of the authority that issued the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.GivenName
  description: The given name of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.Pseudonym
  description: The pseudonym of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.JurisdictionStateOrProvinceName
  description: The jurisdiction state or province of the authority that issued the
    engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.GenerationQualifier
  description: The generation qualifier of the authority that issued the engine custom
    SSL certificate. For example, 3rd generation.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.LocalityName
  description: The locality of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.SurName
  description: The surname of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.CommonName
  description: The common name of the authority that issued the engine custom SSL
    certificate. For example, "Cortex XSOAR TLS".
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.JurisdictionLocalityName
  description: The jurisdiction locality of the authority that issued the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.StreetAddress
  description: The street address of the authority that issued the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.PostalCode
  description: The postal code of the authority that issued the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.PostalAddress
  description: The postal address of the authority that issued the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.JurisdictionCountryName
  description: The jurisdiction country name of the authority that issued the engine
    custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.CountryName
  description: The country of the authority that issued the engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.EmailAddress
  description: The email address of the authority that issued the engine custom SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Issuer.DomainNameQualifier
  description: The domain name qualifier of the authority that issued the engine custom
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Extentions.IssuerAlternativeName
  description: The alternate name of the issuer.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Extentions.SubjectAlternativeName
  description: The alternate name of the subject.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.NotValidBefore
  description: The beginning of the validity period for the certificate in UTC format.
  type: Date
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.NotValidAfter
  description: The end of the validity period for the certificate in UTC format.
  type: Date
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Version
  description: The version of the certificate.
  type: Number
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Raw
  description: The raw engine custom SSL certificate.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.Identifier
  description: The engine SSL identifier.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.OrganizationalUnitName
  description: The unit name of the organization that is the holder of the endpoint
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.OrganizationName
  description: The name of the organization that is the holder of the endpoint SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.BusinessCategory
  description: The business category of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.Title
  description: The title of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.SerialNumber
  description: The serial number of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.StateOrProvinceName
  description: The state or province of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.DomainComponent
  description: The DNS domain name of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.GivenName
  description: The given name of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.Pseudonym
  description: The pseudonym of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.JurisdictionStateOrProvinceName
  description: The jurisdiction state or province of the holder of the endpoint SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.GenerationQualifier
  description: The generation qualifier of the holder of the endpoint SSL certificate.
    For example, 3rd generation.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.LocalityName
  description: The locality of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.SurName
  description: The surname of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.CommonName
  description: The common name of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.JurisdictionLocalityName
  description: The jurisdiction locality of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.StreetAddress
  description: The street address of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.PostalCode
  description: The postal code of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.PostalAddress
  description: The postal address of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.JurisdictionCountryName
  description: The jurisdiction country name of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.CountryName
  description: The country of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.EmailAddress
  description: The email address of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Subject.DomainNameQualifier
  description: The domain name qualifier of the holder of the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.OrganizationalUnitName
  description: The unit name of the organization of the authority that issued the
    endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.OrganizationName
  description: The name of the organization of the authority that issued the endpoint
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.BusinessCategory
  description: The business category of the authority that issued the endpoint SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.Title
  description: The title of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.SerialNumber
  description: The serial number of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.StateOrProvinceName
  description: The state or province of the authority that issued the endpoint SSL
    certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.DomainComponent
  description: The DNS domain name of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.GivenName
  description: The given name of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.Pseudonym
  description: The pseudonym of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.JurisdictionStateOrProvinceName
  description: The jurisdiction state or province of the authority that issued the
    endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.GenerationQualifier
  description: The generation qualifier of the authority that issued the endpoint
    SSL certificate. For example, 3rd generation.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.LocalityName
  description: The locality of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.SurName
  description: The surname of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.CommonName
  description: The common name of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.JurisdictionLocalityName
  description: The jurisdiction locality of the authority that issued the endpoint
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.StreetAddress
  description: The street address of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.PostalCode
  description: The postal code of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.PostalAddress
  description: The postal address of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.JurisdictionCountryName
  description: The jurisdiction country name of the authority that issued the endpoint
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.CountryName
  description: The country of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.EmailAddress
  description: The email address of the authority that issued the endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Issuer.DomainNameQualifier
  description: The domain name qualifier of the authority that issued the endpoint
    SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Extentions.IssuerAlternativeName
  description: The alternate name of the issuer.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Decode.Extentions.SubjectAlternativeName
  description: The alternate name of the subject.
  type: String
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.NotValidBefore
  description: The beginning of the validity period for the certificate in UTC format.
  type: Date
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.NotValidAfter
  description: The end of the validity period for the certificate in UTC format.
  type: Date
- contextPath: TroubleShoot.Engine.SSL/TLS.CustomCertificateAuthorities.Decode.Version
  description: The version of the certificate.
  type: Number
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Certificates.Raw
  description: The raw endpoint SSL certificate.
  type: String
- contextPath: TroubleShoot.Endpoint.SSL/TLS.Identifier
  description: The endpoint SSL identifier.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CertificatesTroubleshoot', 'start', __line__())
  ### pack version: 2.0.20


  import os
  import socket
  import ssl
  from pathlib import Path
  from typing import List, Dict, Optional, Any
  import subprocess
  import re
  import pem
  # mypy: ignore-errors
  from cryptography import x509
  from cryptography.x509.extensions import ExtensionNotFound
  from cryptography.hazmat.backends import default_backend


  def parse_certificate_object_identifier_name(certificate: x509.Name, oid: x509.ObjectIdentifier) -> Optional[List[str]]:
      """ Get attribute from decoded certificate.

      Args:
          certificate: Certificate as x509.Certificate .
          oid: Enum value from x509.NameOID .

      Returns:
          list: Decoded values.
      """
      attributes = [attr.value for attr in certificate.get_attributes_for_oid(oid)]

      return attributes if attributes else None


  def parse_certificate_object_identifier_extentions(certificate: x509.Extensions, oid: x509.ObjectIdentifier) -> \
          Optional[List[str]]:
      """ Get attribute from decoded certificate extension.

      Args:
          certificate: Certificate as x509.Certificate .
          oid: Enum value from x509.ExtentionOID .

      Returns:
          list: Decoded values.
      """
      try:
          values = certificate.get_extension_for_oid(oid).value
          attributes = [item.value for item in values]    # type: ignore[attr-defined]
      except ExtensionNotFound:
          attributes = []

      return attributes if attributes else None


  def certificate_to_ec(certificate_name: x509.Name) -> dict:
      """ Translate abstrcat object x509.Name to entry context.

      Args:
          certificate_name: Issuer or subject.

      Returns:
          dict: Corresponding enrty context.
      """
      return {
          # Contact details
          "EmailAddress": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.EMAIL_ADDRESS),
          "SurName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.SURNAME),
          # Location related
          "CountryName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.COUNTRY_NAME),
          "StateOrProvinceName": parse_certificate_object_identifier_name(certificate_name,
                                                                          x509.NameOID.STATE_OR_PROVINCE_NAME),
          "LocalityName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.LOCALITY_NAME),
          "JurisdictionCountryName": parse_certificate_object_identifier_name(certificate_name,
                                                                              x509.NameOID.JURISDICTION_COUNTRY_NAME),
          "JurisdictionLocalityName": parse_certificate_object_identifier_name(certificate_name,
                                                                               x509.NameOID.JURISDICTION_LOCALITY_NAME),
          "JurisdictionStateOrProvinceName": parse_certificate_object_identifier_name(
              certificate_name,
              x509.NameOID.JURISDICTION_STATE_OR_PROVINCE_NAME),
          "PostalAddress": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.POSTAL_ADDRESS),
          "PostalCode": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.POSTAL_CODE),
          "StreetAddress": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.STREET_ADDRESS),
          # Domain / URL
          "DomainNameQualifier": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.DN_QUALIFIER),
          "DomainComponent": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.DOMAIN_COMPONENT),
          "GenerationQualifier": parse_certificate_object_identifier_name(certificate_name,
                                                                          x509.NameOID.GENERATION_QUALIFIER),
          "GivenName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.GIVEN_NAME),
          "CommonName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.COMMON_NAME),
          # Business
          "BusinessCategory": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.BUSINESS_CATEGORY),
          "OrganizationName": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.ORGANIZATION_NAME),
          "OrganizationalUnitName": parse_certificate_object_identifier_name(certificate_name,
                                                                             x509.NameOID.ORGANIZATIONAL_UNIT_NAME),
          # General
          "Title": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.TITLE),
          "SerialNumber": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.SERIAL_NUMBER),
          "Pseudonym": parse_certificate_object_identifier_name(certificate_name, x509.NameOID.PSEUDONYM),
      }


  def certificate_extentions_to_ec(certificate_ext: x509.Extensions) -> dict:
      """ Translate abstrcat object x509.Name to entry context.

      Args:
          certificate_ext: Certificate extension.

      Returns:
          dict: Corresponding enrty context.
      """
      return {
          "IssuerAlternativeName": parse_certificate_object_identifier_extentions(
              certificate_ext,
              x509.ExtensionOID.ISSUER_ALTERNATIVE_NAME),
          "SubjectAlternativeName": parse_certificate_object_identifier_extentions(
              certificate_ext,
              x509.ExtensionOID.SUBJECT_ALTERNATIVE_NAME),
      }


  def parse_certificate(certificate: str) -> dict:
      """ Decode certificate from

      Args:
          certificate: certificate as string.

      Returns:
          dict: Corresponding enrty context.
      """
      decode_certificate = x509.load_pem_x509_certificate(certificate.encode(), default_backend())
      return {
          "Raw": certificate,
          "Decode": {
              "Issuer": certificate_to_ec(decode_certificate.issuer),
              "Subject": certificate_to_ec(decode_certificate.subject),
              "Extentions": certificate_extentions_to_ec(decode_certificate.extensions),
              "NotValidBefore": str(decode_certificate.not_valid_before),
              "NotValidAfter": str(decode_certificate.not_valid_after),
              "Version": decode_certificate.version.value,
          }
      }


  def parse_all_certificates(certifcates: str) -> List[Dict[Any, Any]]:
      """ Parse all certificates in a given string.

      Args:
          certifcates: certificates as a single string.

      Returns:
          list: Corresponding enrty context.
      """
      return [parse_certificate(cert.as_text()) for cert in pem.parse(certifcates.encode())]


  def docker_container_details() -> dict:
      """ Gather docker container SSL/TLS Certificate information (Which set by demisto engine), The following details:
              1. Global veriables which used by requests module:
                  a. SSL_CERT_FILE
                  b. REQUESTS_CA_BUNDLE
              2. Custom python ssl file located in docker container - SSL_CERT_FILE

      Returns:
          dict: Corresponding enrty context.
      """
      ssl_cert_file_env = os.environ.get('SSL_CERT_FILE')
      custom_certs = []
      if ssl_cert_file_env:
          container_ca_file = Path(ssl_cert_file_env)
          certificates = "" if not container_ca_file.is_file() else container_ca_file.read_text()
          custom_certs = parse_all_certificates(certificates)
          demisto.debug(f'custom certs len: {len(custom_certs)}')
      return {
          "ShellVariables": {
              "SSL_CERT_FILE": os.environ.get('SSL_CERT_FILE'),
              "CERT_FILE": os.environ.get('REQUESTS_CA_BUNDLE'),
          },
          "CustomCertificateAuthorities": custom_certs[:5],
      }


  def get_certificates(endpoint: str, port: str) -> str:
      """Download certificate from remote server.

      Args:
          endpoint: url to get certificate from.
          port: endpoint port.

      Returns:
          str: certificate string containing the certs in PEM format.
      """
      mode = demisto.getArg('mode') or 'python'
      if mode == "openssl":
          openssl_res = subprocess.check_output(['openssl', 's_client', '-servername', endpoint,
                                                 '-host', endpoint, '-port', port, '-showcerts'], text=True,
                                                stderr=subprocess.STDOUT)
          demisto.debug(f'openssl output: {openssl_res}')
          return '\n'.join(re.findall(r'^-----BEGIN CERT.*?^-----END CERTIFICATE-----', openssl_res, re.DOTALL | re.MULTILINE))
      else:
          hostname = endpoint
          conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
          sock = context.wrap_socket(conn, server_hostname=hostname)
          sock.settimeout(60)  # make sure we don't get stuck
          sock.connect((hostname, int(port)))
          peer_cert = sock.getpeercert(True)
          if peer_cert:
              return ssl.DER_cert_to_PEM_cert(peer_cert)
          else:
              return ""


  def endpoint_certificate(endpoint: str, port: str) -> dict:
      """ Get certificate issuer from endpoint.

      Args:
          endpoint: Enpoint url:port, if no port will be 443 by default.
          port: endpoint port.

      Returns:
          dict: Corresponding enrty context.
      """
      certificates = get_certificates(endpoint, port)
      demisto.debug(f'endpoint: {endpoint} port: {port} certs: {certificates}')
      return {
          "Identifier": endpoint,
          "Certificates": parse_all_certificates(certificates)
      }


  def build_human_readable(entry_context: dict) -> str:
      human_readable = ""
      entry_context = entry_context.get("TroubleShoot", {})
      # Engine docker container
      engine: dict = dict_safe_get(entry_context, ['Engine', 'SSL/TLS'], {}, dict)
      human_readable += "## Docker container engine - custom certificate\n"
      engine_cer_general = [dict_safe_get(item, ['Decode']) for item in
                            engine.get('CustomCertificateAuthorities', {})]
      engine_cer_issuer = [dict_safe_get(item, ('Decode', 'Issuer')) for item in
                           engine.get('CustomCertificateAuthorities', {})]
      engine_cer_subjects = [dict_safe_get(item, ('Decode', 'Subject')) for item in
                             engine.get('CustomCertificateAuthorities', {})]
      engine_cer_extentions = [dict_safe_get(item, ('Decode', 'Extentions')) for item in
                               engine.get('CustomCertificateAuthorities', {})]
      engine_vars = engine.get('ShellVariables')
      human_readable += tableToMarkdown(name="Enviorment variables", t=engine_vars)
      human_readable += tableToMarkdown(name="General", t=engine_cer_general,
                                        headers=['NotValidBefore', 'NotValidAfter', 'Version']) \
          if engine_cer_extentions else ''
      human_readable += tableToMarkdown(name="Issuer", t=engine_cer_issuer, removeNull=True) \
          if engine_cer_issuer else ''
      human_readable += tableToMarkdown(name="Subject", t=engine_cer_subjects, removeNull=True) \
          if engine_cer_subjects else ''
      human_readable += tableToMarkdown(name="Extentions", t=engine_cer_extentions, removeNull=True) \
          if engine_cer_extentions else ''
      # Endpoint
      endpoint: dict = entry_context.get('Endpoint', {}).get('SSL/TLS', {})
      endpoint_cer_general = [dict_safe_get(item, ['Decode']) for item in
                              endpoint.get('Certificates', {})]
      endpoint_cer_issuer = [dict_safe_get(item, ('Decode', 'Issuer')) for item in
                             endpoint.get('Certificates', {})]
      endpoint_cer_subject = [dict_safe_get(item, ('Decode', 'Subject')) for item in
                              endpoint.get('Certificates', {})]
      endpoint_cer_extentions = [dict_safe_get(item, ('Decode', 'Extentions')) for item in
                                 endpoint.get('Certificates', {})]
      human_readable += f"\n\n## Endpoint certificate - {endpoint.get('Identifier')}\n"
      human_readable += tableToMarkdown(name="General", t=endpoint_cer_general,
                                        headers=['NotValidBefore', 'NotValidAfter', 'Version'])
      human_readable += tableToMarkdown(name="Issuer", t=endpoint_cer_issuer, removeNull=True)
      human_readable += tableToMarkdown(name="Subject", t=endpoint_cer_subject, removeNull=True)
      human_readable += tableToMarkdown(name="Extentions", t=endpoint_cer_extentions, removeNull=True)
      human_readable += "\n"

      return human_readable


  def main():
      try:
          entry_context = {
              "TroubleShoot": {
                  'Engine': {
                      'SSL/TLS': docker_container_details(),
                  },
                  'Endpoint': {
                      'SSL/TLS': endpoint_certificate(demisto.getArg('endpoint'), demisto.getArg("port") or "443"),
                  }
              }
          }
          human_readable = build_human_readable(entry_context)

          return_outputs(human_readable, entry_context, {})
      except Exception as e:
          return_error(f'Failed to execute Certificate Troubleshoot.\n Error: {str(e)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CertificatesTroubleshoot', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python
