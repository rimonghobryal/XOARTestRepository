comment: This automation takes several alert fields from the RSA NetWitness alerts
  context and displays them as markdown in the layout.
commonfields:
  id: SetRSANetWitnessAlertsMD
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.9.0
    itemVersion: 3.2.1
    packID: RSANetWitness_v11_1
    packName: RSA NetWitness
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.73190
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SetRSANetWitnessAlertsMD
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SetRSANetWitnessAlertsMD', 'start', __line__())
  ### pack version: 3.2.1



  KEYS_INCIDENT_FIELDS = {
      "rsaalerts": "RSA Alerts",
  }


  def read_context_from_rsa_netwitness_alerts() -> dict:
      incident = demisto.incident().get("CustomFields", {})

      data: dict = {}
      for key in KEYS_INCIDENT_FIELDS:
          if field_content := incident.get(key):
              data[KEYS_INCIDENT_FIELDS[key]] = field_content

      return data


  def parse_alerts(alerts: list) -> list:
      return [
          {
              "Created": alert.get("created"),
              "Events": alert.get("events"),
              "ID": alert.get("id"),
              "Risk Score": alert.get("riskScore"),
              "Title": alert.get("title"),
              "Type": alert.get("type"),
              "Detail": alert.get("detail"),
          }
          for alert in alerts if alerts
      ]


  def json_to_md(incident_fields: dict) -> str:
      return tableToMarkdown(
          name="",
          t=parse_alerts(incident_fields.get("RSA Alerts", [])),
          headers=["ID", "Title", "Type", "Risk Score", "Created", "Events", "Detail"],
          removeNull=True,
          json_transform_mapping={
              "Events": JsonTransformer(
                  keys=["destination", "domain", "eventSource", "eventSourceId", "source"],
                  is_nested=True,
              )
          },
      )


  def main():
      incident_fields = read_context_from_rsa_netwitness_alerts()
      return_results(
          CommandResults(
              readable_output=json_to_md(incident_fields) if incident_fields else "No data to present."
          )
      )


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('SetRSANetWitnessAlertsMD', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
