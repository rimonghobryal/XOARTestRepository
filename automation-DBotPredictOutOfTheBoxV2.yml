args:
- description: Subject of the email.
  name: emailSubject
- description: Body of the email.
  name: emailBody
- description: HTML body of the email. Only use this field if the emailBody argument
    is empty.
  name: emailBodyHTML
- defaultValue: "20"
  description: 'Maximum number of positive/negative words to return for the model
    decision. '
  name: topWordsLimit
- defaultValue: "0.05"
  description: Threshold to determine word importance (range 0-1). Default is 0.05.
  name: wordThreshold
- defaultValue: "5"
  description: Minimum number of characters for the prediction.
  name: minTextLength
- defaultValue: "0.9"
  deprecated: true
  description: The label probability threshold. Default is 0.
  name: labelProbabilityThreshold
- description: The confidence threshold. The model will provide predictions only if
    their confidence is above this threshold.
  name: confidenceThreshold
- auto: PREDEFINED
  defaultValue: "true"
  description: Whether to return an error when there is no prediction. Default is
    "true".
  name: returnError
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: "false"
  description: Whether to set Cortex XSOAR out-of-the-box DBot fields.
  name: setIncidentFields
  predefined:
  - "true"
  - "false"
comment: Predict phishing incidents using the out-of-the-box pre-trained model.
commonfields:
  id: DBotPredictOutOfTheBoxV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.4.10
    packID: ML
    packName: Machine Learning
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/ml:1.0.0.32340
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DBotPredictOutOfTheBoxV2
outputs:
- contextPath: DBotPredictPhishingWords.Label
  description: The predicted label.
  type: String
- contextPath: DBotPredictPhishingWords.Probability
  description: The predicted probability (range 0-1).
  type: Number
- contextPath: DBotPredictPhishingWords.PositiveWords
  description: A list of words in the input text that supports the model decision.
  type: Unknown
- contextPath: DBotPredictPhishingWords.NegativeWords
  description: A list of words in the input text that do not support the model decision.
    These words better support a different classification class.
  type: Unknown
- contextPath: DBotPredictPhishingWords.TextTokensHighlighted
  description: The input text (after pre-processing) with the positive words that
    support the model decision.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: true
script: |
  register_module_line('DBotPredictOutOfTheBoxV2', 'start', __line__())
  ### pack version: 1.4.10
  # pylint: disable=no-member
  import demisto_ml

  import traceback

  TARGET_PRECISION = 0.97
  THRESHOLD = 0.9
  OUT_OF_THE_BOX_MODEL_NAME = 'demisto_out_of_the_box_model_v2'
  OUT_OF_THE_BOX_MODEL_PATH = '/ml/encrypted_model.b'
  EVALUATION_PATH = '/ml/oob_evaluation.txt'
  SCRIPT_MODEL_VERSION = '4.0'
  OOB_VERSION_INFO_KEY = 'oob_version'


  def oob_model_exists_and_updated():
      res_model = demisto.executeCommand("getMLModel", {"modelName": OUT_OF_THE_BOX_MODEL_NAME})[0]
      if is_error(res_model):
          return False
      existing_model_version = res_model['Contents']['model']['extra'].get(OOB_VERSION_INFO_KEY, -1)
      return existing_model_version == SCRIPT_MODEL_VERSION


  def load_oob_model():
      try:
          encoded_model = demisto_ml.load_oob(OUT_OF_THE_BOX_MODEL_PATH)
      except Exception:
          return_error(traceback.format_exc())
      res = demisto.executeCommand('createMLModel', {'modelData': encoded_model,
                                                     'modelName': OUT_OF_THE_BOX_MODEL_NAME,
                                                     'modelLabels': ['Malicious', 'Non-Malicious'],
                                                     'modelOverride': 'true',
                                                     'modelType': 'torch',
                                                     'modelExtraInfo': {'threshold': THRESHOLD,
                                                                        OOB_VERSION_INFO_KEY: SCRIPT_MODEL_VERSION
                                                                        }
                                                     })
      if is_error(res):
          return_error(get_error(res))

      with open(EVALUATION_PATH, 'r') as json_file:
          data = json.load(json_file)
      y_test = data['YTrue']
      y_pred = data['YPred']
      y_pred_prob = data['YPredProb']

      y_pred_evaluation = [{pred: prob} for pred, prob in zip(y_pred, y_pred_prob)]
      res = demisto.executeCommand('GetMLModelEvaluation', {'yTrue': json.dumps(y_test),
                                                            'yPred': json.dumps(y_pred_evaluation),
                                                            'targetPrecision': str(0.85),
                                                            'targetRecall': str(0),
                                                            'detailedOutput': 'true'
                                                            })
      if is_error(res):
          return_error(get_error(res))
      confusion_matrix = json.loads(res[0]['Contents']['csr_matrix_at_threshold'])
      confusion_matrix_no_all = {k: v for k, v in confusion_matrix.items() if k != 'All'}
      confusion_matrix_no_all = {k: {sub_k: sub_v for sub_k, sub_v in v.items() if sub_k != 'All'}
                                 for k, v in confusion_matrix_no_all.items()}
      res = demisto.executeCommand('evaluateMLModel',
                                   {'modelConfusionMatrix': confusion_matrix_no_all,
                                    'modelName': OUT_OF_THE_BOX_MODEL_NAME,
                                    'modelEvaluationVectors': {'Ypred': y_pred,
                                                               'Ytrue': y_test,
                                                               'YpredProb': y_pred_prob
                                                               },
                                    'modelConfidenceThreshold': THRESHOLD,
                                    'modelTargetPrecision': TARGET_PRECISION
                                    })

      if is_error(res):
          return_error(get_error(res))


  def predict_phishing_words():
      if not oob_model_exists_and_updated():
          load_oob_model()
      dargs = demisto.args()
      dargs['modelName'] = OUT_OF_THE_BOX_MODEL_NAME
      res = demisto.executeCommand('DBotPredictPhishingWords', dargs)
      if is_error(res):
          return_error(get_error(res))
      return res


  def main():
      res = predict_phishing_words()
      return res


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      demisto.results(main())

  register_module_line('DBotPredictOutOfTheBoxV2', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- phishing
- ml
timeout: 60Âµs
type: python
