args:
- name: data
commonfields:
  id: 79ce8bcc-993a-4933-872c-a1ddb385c071
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.84405
enabled: true
engineinfo: {}
mainengineinfo: {}
name: test_get_MalwareBazar
outputs:
- {}
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  """Base Script for Cortex XSOAR (aka Demisto)
  This is an empty script with some basic structure according
  to the code conventions.
  MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"
  Developer Documentation: https://xsoar.pan.dev/docs/welcome
  Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
  Linting: https://xsoar.pan.dev/docs/integrations/linting
  """

  from typing import Dict, Any
  import traceback

  def main():
      try:
          # TODO: replace the invoked command function with yours
          args=demisto.args()
          data= args.get('data','')
          #demisto.info(str(type(data)))

          parte= data.items()
          #demisto.info(str(parte))


          a=[]
          score=0
          signature=0


          for key, value in data.items():
              #demisto.info(str(i))
              if(key=='score'):
                  if(value==None):
                      score=0
                  else:
                      score=value
              if(key=='signature'):
                  signature=value
              #if(signature!=0):
          #a.append(str(score)+": "+str(signature))
                  #demisto.info(str(a))

              #.append(x[1])

          #demisto.info(str(a))




          appendContext("getMalwareBazar_automation", [str(score)+":"+str(signature)])
          #("getMalwareBazar_automation_values", str(valori))

          #output = {"dict": risultato}
          #fine = CommandResults(outputs_prefix="getMalwareBazar_automation", outputs=output)
          return_results("ok")
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags:
- dynamic-section
type: python
