comment: Use this script to display meta events inside the layout.
commonfields:
  id: RSA_DisplayMetasEvents
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.9.0
    itemVersion: 3.2.4
    packID: RSANetWitness_v11_1
    packName: RSA NetWitness
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.73190
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RSA_DisplayMetasEvents
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RSA_DisplayMetasEvents', 'start', __line__())
  ### pack version: 3.2.4




  ''' COMMAND FUNCTION '''


  def CamelCaseToDotCase(key: str) -> str:
      '''
      Convert camel case string to dot case string.
      ex: eventSource => event.source
      '''
      dot_format = ""
      for char in key:
          if char.isupper():
              dot_format += "." + char.lower()
          else:
              dot_format += char

      return dot_format


  def display_metas() -> dict:
      '''
      Return metas event alert markdown to display it in dynamic section.
      '''
      incident = demisto.incident()

      if (
          not isinstance(incident, dict)
          or 'CustomFields' not in incident
          or 'rsametasevents' not in incident['CustomFields']
          or not len(incident['CustomFields']['rsametasevents'])
      ):
          return {
              'Type': entryTypes['note'],
              'ContentsFormat': formats['markdown'],
              'Contents': 'No event available for this incident.'
          }

      rsametasevents = incident.get('CustomFields', {}).get('rsametasevents', [])[0]
      markdown = tableToMarkdown('', rsametasevents, headers=rsametasevents.keys(), headerTransform=CamelCaseToDotCase)
      return {'Type': entryTypes['note'], 'ContentsFormat': formats['markdown'], 'Contents': markdown}


  ''' MAIN FUNCTION '''


  def main():

      content = display_metas()
      return_results(content)


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('RSA_DisplayMetasEvents', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
