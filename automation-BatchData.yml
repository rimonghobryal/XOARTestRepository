args:
- description: number of items that will be returned in each dictionary items (must
    be of type int)
  name: batch_size
  required: true
- description: comma separated list of items
  name: data
  required: true
- description: This nest the path under BatchedData in context. If you are running
    this script multiple times/simultaneously in a playbook, your  data will be over
    written.
  name: context_path
  required: true
comment: 'This Automation takes in a string of comma separated items and returns a
  dictionary of with the defined chunk size. '
commonfields:
  id: BatchData
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.2.1
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: BatchData
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('BatchData', 'start', __line__())
  ### pack version: 1.2.1



  batch_size = demisto.args()['batch_size']
  list_of_items = demisto.args()['data']
  context_path = demisto.args()['context_path']

  list_of_items = list(list_of_items.split(","))

  batch_size = int(batch_size)
  batch_list = list()

  for i in range(0, len(list_of_items), batch_size):
      batch_list.append(list_of_items[i:i + batch_size])

  context = {"BatchedData": {context_path: batch_list}}
  demisto.results({'Type': entryTypes['note'],
                   'Contents': context,
                   'ContentsFormat': formats['json'],
                   'EntryContext': context})

  register_module_line('BatchData', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
