args:
- description: Integration name for which to check its instance name.
  name: integration_name
  required: true
- auto: PREDEFINED
  description: Whether to return a full list of instance names related to the given
    integation name.
  name: return_all_instances
  predefined:
  - "false"
  - "true"
comment: Given an integration name, returns the instance name.
commonfields:
  id: GetInstanceName
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.8
    packID: DeveloperTools
    packName: Developer Tools
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: GetInstanceName
outputs:
- contextPath: Instances.integrationName
  description: Requested integration name.
  type: String
- contextPath: Instances.instanceName
  description: Instance name for given integration.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetInstanceName', 'start', __line__())
  ### pack version: 1.3.8



  from typing import Dict, Any, List


  def instance_check(instances, integration_name: str) -> List:
      instance_names = []
      for instance_name, details in instances.items():
          if details.get('brand') == integration_name:
              instance_names.append(instance_name)

      return instance_names


  def get_instance_name_command(args: Dict[str, Any]) -> CommandResults:
      integration_name = args.get('integration_name', '')

      instances = demisto.getModules()

      instance_names = instance_check(instances, integration_name)

      if not instance_names:
          raise DemistoException(f'No instance for integration {integration_name}.')

      if argToBoolean(args.get('return_all_instances', 'false')):
          return CommandResults(
              outputs_prefix='Instances',
              outputs_key_field='',
              outputs=[
                  {
                      'integrationName': integration_name,
                      'instanceName': instance_name,
                  } for instance_name in instance_names
              ],
          )

      return CommandResults(
          outputs_prefix='Instances',
          outputs_key_field='',
          outputs={
              'integrationName': integration_name,
              'instanceName': instance_names[0],
          },
      )


  def main():
      try:
          return_results(get_instance_name_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute Script. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetInstanceName', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
type: python
