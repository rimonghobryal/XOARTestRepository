args:
- description: The indicators query.
  name: query
- description: A comma-separated list of fields in the object to ignore.
  name: dontPopulateFields
- defaultValue: "10000"
  description: The maximum number of indicators to fetch.
  name: limit
- defaultValue: "0"
  description: The results offset page. Only change when the number of the results
    exceed the limit.
  name: offset
- description: Salt for the hash function.
  name: addRandomSalt
  secret: true
- description: A comma-separated list of fields to hash. Supports wildcard "*".
  name: fieldsToHash
- defaultValue: id,score,investigationIDs
  description: A comma-separated list of fields in the object to poplulate. Defaults
    are id, score, and investigationIDs.
  name: populateFields
comment: Gets a list of indicator objects and the associated indicator outputs that
  match the specified query and filters. The results are returned in a structured
  data file.
commonfields:
  id: 4792970f-ae76-4c75-80b2-24c3bc90dca4
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.66339
enabled: true
engineinfo: {}
mainengineinfo: {}
name: MARCO
outputs:
- contextPath: MARCO.key
- contextPath: MARCO.nt
- contextPath: MARCO.value
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetIndicatorsByQuery', 'start', __line__())
  ### pack version: 1.33.18


  import json

  def main():
      args = demisto.args()
      data_from_file = args.get('query')
      nontrovato=[]
      chiavi = []
      valori = []
      for x in data_from_file:
          #print(x)
          for y in x.keys():
              if y == "indicator_type" and x[y] != "URL": # y == value
                  if(x[y] == "Report"):
                      continue
                  elif(x[y]=='IP'):
                      chiavi.append("ip.all")
                      valori.append(x['value'])
                  elif(x[y]== "Domain"):
                      chiavi.append("domain")
                      valori.append("'"+str(x['value'])+"'")
                  elif(x[y]=="Email"):
                      chiavi.append("email.all")
                      valori.append("'"+str(x['value'])+"'")
                  elif(x[y]=="File"):
                      chiavi.append("checksum")
                      valori.append("'"+str(x['value'])+"'")
                  elif(x[y]=="URL"):
                      chiavi.append("url")
                      valori.append("'"+(x['value'])+"'")
                  else:
                      nontrovato.append(x[y])

                  #demisto.info(variabile)
                  #chiavi.append(variabile[-1][0])
                  #valori.append(variabile[-1][1])

      #output = {
      #    'values': {
      #        'v': a,
      #        'nt':nontrovato
      #    }
      #}
      output = {"key": chiavi, "value": valori,"nt": nontrovato}

      fine = CommandResults(outputs_prefix="MARCO", outputs=output)

      return_results(fine)
  if __name__ in ['__main__', '__builtin__', 'builtins']:
      demisto.results(main())

  register_module_line('MARCO', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- ml
type: python
