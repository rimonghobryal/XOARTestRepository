args:
- name: IoC
  required: true
commonfields:
  id: c39dac8d-c7e3-4476-8dbc-5866011480f7
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: gtts/tts:latest
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Test_texttospeech
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  """Base Script for Cortex XSOAR (aka Demisto)
  This is an empty script with some basic structure according
  to the code conventions.
  MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"
  Developer Documentation: https://xsoar.pan.dev/docs/welcome
  Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
  Linting: https://xsoar.pan.dev/docs/integrations/linting
  """

  from typing import Dict, Any
  import traceback
  from gtts import gTTS
  import io
  import base64
  ''' MAIN FUNCTION '''

  def main():
      try:
          text="Ã¨ appena scattato il seguente incidente, Catastrofe informatica. Valori di ai-o-si. \n"
          args=demisto.args()
          ioc=args.get('IoC','')
          for x in ioc:
              text=text+str(x)+" "+str(ioc[x])+" \n"

          text=text+"Siete invitati ad effettuare i dovuti controlli. \nSaluti,\nIl vostro amato so-ar."

          language = "it"
          # Generate gTTS object
          tts = gTTS(text=text, lang=language, slow=False)
          # Save audio to an in-memory file (BytesIO)
          audio_file = io.BytesIO()
          tts.write_to_fp(audio_file)
          audio_data = audio_file.getvalue()
          #return_results(fileResult("test.mp3", audio_data))
          result=fileResult("test.mp3", audio_data)
          return_results(result)
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
type: python
